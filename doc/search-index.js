var searchIndex = JSON.parse('{\
"draught":{"doc":"Draught","t":[0,0,4,13,13,11,4,13,13,4,13,13,13,4,13,13,13,13,13,13,13,13,13,0,3,12,12,11,3,12,12,11,3,12,12,11,17,17,3,12,12,11,3,12,12,12,12,11,3,12,12,11,11,11,3,12,12,11,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,0,3,12,12,11,11,11,11,11,11,11,11,0,3,12,5,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["board","enums","Team","Black","White","opponent","Strength","Man","King","SquareState","Empty","Occupied","Unplayable","Moveable","Allowed","UnoccupiedSrc","OccupiedDest","OutOfBounds","Unplayable","WrongTeamSrc","IllegalTrajectory","NoJumpablePiece","JumpingSameTeam","iter","RowIndexIterator","board","row_cursor","new","RowSquareIterator","board","index_iter","new","PieceIterator","board","index_cursor","new","STD_WIDTH","STD_HEIGHT","Piece","team","strength","new","Direction","nw","ne","se","sw","empty","Square","occupant","state","new","pc","empty","BrdIdx","row","col","from","Board","cells","width","height","current_turn","cell_mut","diagonal_indices","adjacent_dir","filter_indices","player_diagonal_indices","jumpable_indices","jumpable_dir","player_jumpable_indices","idx_diffs","cell","set_cell","grid_cell","cell_index","cell_idx","board_index","can_move","validate_man_move","validate_king_move","jumpee_idx","validate_jumpee","check_jumpee_team","new","init_game","current_turn","set_turn","cells","num_cells","num_pieces","num_player","score","cell_state","utils","set_panic_hook","game","Game","current","previous_boards","previous_board","current_board","make_move","execute_move","execute_jump","push_new_board","set_current","new","player","Player","score","init_game","__wasm_bindgen_generated_init_game","log","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","return_abi","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","return_abi","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","return_abi","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","return_abi","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","return_abi","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","return_abi","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","return_abi","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","return_abi","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","return_abi","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","return_abi","vzip","next","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","ref_from_abi","ref_from_abi","ref_from_abi","ref_from_abi","ref_from_abi","ref_from_abi","from_abi","from_abi","from_abi","from_abi","from_abi","from_abi","from_abi","from_abi","from_abi","from_abi","into_abi","into_abi","into_abi","into_abi","into_abi","into_abi","into_abi","into_abi","into_abi","into_abi","describe","describe","describe","describe","describe","describe","describe","describe","describe","describe","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","none","none","none","none","none","none","none","none","none","none","ref_mut_from_abi","ref_mut_from_abi","ref_mut_from_abi","ref_mut_from_abi","ref_mut_from_abi","ref_mut_from_abi"],"q":["draught","draught::board","draught::board::enums","","","","","","","","","","","","","","","","","","","","","draught::board","draught::board::iter","","","","","","","","","","","","draught::board","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","draught","draught::utils","draught","draught::game","","","","","","","","","","","draught","draught::player","","draught","","","draught::board::enums","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","draught::board::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","draught::board","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","draught::game","","","","","","","","","","draught::player","","","","","","","","","","","draught::board::iter","","","draught::board::enums","","","","draught::board","","","","","draught::player","draught::board::enums","","","","draught::board","","","","","","","","draught::board::enums","","","","draught::board","","","","","draught::game","draught::board::enums","","draught::board","","draught::game","draught::board","","","","draught::game","draught::player","draught::board::enums","","","","draught::board","","","","draught::game","draught::player","draught::board::enums","","","","draught::board","","","","draught::game","draught::player","draught::board::enums","","","","draught::board","","","","draught::game","draught::player","draught::board::enums","","","","draught::board","","","","draught::game","draught::player","draught::board::enums","","","","draught::board","","","","draught::game","draught::player","draught::board","","","","draught::game","draught::player"],"d":["Board module for components related to the checkers board …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Standard width of a checkers board is 8 squares","Standard height of a checkers board is 8 squares","Game piece given by its team and strength (normal or …","","","","Standard diagonal movements given by north west/east etc","North West ","North East","South East","South West","Create an empty direction full of [<code>Option::None</code>]","Board squares given by a state and a possible occupying …","Game piece if square is occupied","Description of whether the square is occupied or an …","","","","Rank 2 tensor index to identify a board square by row and …","","","","Single state of a checkers board","1D backing array of board squares for the 2D game board","","","","Get a mutable reference to a board square by 1D array …","Get the 1D array indices for the diagonally adjacent …","Get a [<code>Direction</code>] structure for the diagonally adjacent …","Filter an array of diagonal indices (Like those from […","","Get the 1D array indices for the diagonally jumpable …","Get a [<code>Direction</code>] structure for the diagonally jumpable …","","cast the signed","Get a copy of a board square by 1D array index","Get a copy of a board square by 1D array index","Get a copy of a board square by 2D [<code>BrdIdx</code>] index","Transform a 2D row/column board index into a single 1D …","Similar to [<code>Board::cell_index</code>] but with a [<code>BrdIdx</code>] …","Transform a 1D array index (for [<code>Board::cells</code>]) into a 2D …","Check whether a move given by source and destination …","","","","Unwrap the jumpee piece from the square and […","Check that the source piece and the jumpee are of …","Initialise a game board without game pieces","Reset the given board to a starting layout with 3 rows of …","Get the [<code>Board::current_turn</code>] parameter","","Get a pointer to the backing array of board squares, […","Get the number of board squares","Get the number of remaining pieces","Get the number of remaining pieces for a player","Get the score value, Black - White pieces","Get the state of a board square by 1D array index","","","","Root-level structure for managing the game as a …","","","Get a read-only copy of a previous turn’s board","Set current board to given","Attempt to make a move given a source and destination …","Update board state with given move and push new board …","Update board state with given jump move and push new …","Push current board into the previous turns and set given …","Set current board to given","","","","","","","Wrap the [<code>web_sys</code>] access to the browser console in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get next item from the iterator","Get next item from the iterator","Get next item from the iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,0,2,2,0,3,3,3,0,4,4,4,4,4,4,4,4,4,0,0,5,5,5,0,6,6,6,0,7,7,7,0,0,0,8,8,8,0,9,9,9,9,9,0,10,10,10,10,10,0,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,13,13,13,13,13,13,13,13,13,13,0,0,14,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,5,6,7,1,2,3,4,8,9,10,11,12,14,1,2,3,4,8,8,9,9,10,10,11,11,1,2,3,4,8,9,10,11,12,13,1,3,11,12,13,8,10,11,12,13,14,1,2,3,4,8,10,11,12,13,14,1,2,3,4,8,10,11,12,13,14,1,2,3,4,8,10,11,12,13,14,1,2,3,4,8,10,11,12,13,14,1,2,3,4,8,10,11,12,13,14,8,10,11,12,13,14],"f":[null,null,null,null,null,[[],["team",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["board",3]]],null,null,null,[[["board",3]]],null,null,null,[[["board",3]]],null,null,null,null,null,[[["team",4],["strength",4]],["piece",3]],null,null,null,null,null,[[],["direction",3]],null,null,null,[[["squarestate",4],["piece",3],["option",4]],["square",3]],[[["team",4],["strength",4]],["square",3]],[[],["square",3]],null,null,null,[[["usize",15]],["brdidx",3]],null,null,null,null,null,[[["usize",15]],["square",3]],[[["brdidx",3]],[["option",4],["vec",3]]],[[["brdidx",3]],[["option",4],["direction",3]]],[[["usize",15],["brdidx",3],["team",4],["vec",3]],[["usize",15],["vec",3]]],[[["team",4],["brdidx",3]],[["option",4],["vec",3]]],[[["brdidx",3]],[["option",4],["vec",3]]],[[["brdidx",3]],[["option",4],["direction",3]]],[[["team",4],["brdidx",3]],[["option",4],["vec",3]]],[[["brdidx",3]]],[[["usize",15]],["square",3]],[[["usize",15],["square",3]]],[[["brdidx",3]],["square",3]],[[["usize",15]],["usize",15]],[[["brdidx",3]],["usize",15]],[[["usize",15]],["brdidx",3]],[[["brdidx",3]],["moveable",4]],[[["piece",3],["brdidx",3]],["moveable",4]],[[["piece",3],["brdidx",3]],["moveable",4]],[[["brdidx",3]],["usize",15]],[[["piece",3],["square",3]],["moveable",4]],[[["piece",3]],["bool",15]],[[["usize",15],["team",4]],["board",3]],[[["usize",15],["board",3]],["board",3]],[[],["team",4]],[[["team",4]]],[[]],[[],["usize",15]],[[],["usize",15]],[[["team",4]],["usize",15]],[[],["isize",15]],[[["usize",15]],["squarestate",4]],null,[[]],null,null,null,null,[[["usize",15]],["board",3]],[[],["board",3]],[[["brdidx",3]]],[[["brdidx",3]]],[[["brdidx",3]]],[[["board",3]]],[[["board",3]]],[[["usize",15],["team",4]],["game",3]],null,null,null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],["option",4]],[[],["team",4]],[[],["strength",4]],[[],["squarestate",4]],[[],["moveable",4]],[[],["piece",3]],[[],["direction",3]],[[],["square",3]],[[],["brdidx",3]],[[],["board",3]],[[],["player",3]],[[["team",4]],["bool",15]],[[["strength",4]],["bool",15]],[[["squarestate",4]],["bool",15]],[[["moveable",4]],["bool",15]],[[["piece",3]],["bool",15]],[[["piece",3]],["bool",15]],[[["direction",3]],["bool",15]],[[["direction",3]],["bool",15]],[[["square",3]],["bool",15]],[[["square",3]],["bool",15]],[[["brdidx",3]],["bool",15]],[[["brdidx",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"Team"],[4,"Strength"],[4,"SquareState"],[4,"Moveable"],[3,"RowIndexIterator"],[3,"RowSquareIterator"],[3,"PieceIterator"],[3,"Piece"],[3,"Direction"],[3,"Square"],[3,"BrdIdx"],[3,"Board"],[3,"Game"],[3,"Player"]]}\
}');
initSearch(searchIndex);