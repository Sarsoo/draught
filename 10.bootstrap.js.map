{"version":3,"sources":["webpack://draught/../pkg/draught_bg.js","webpack://draught/./index.js"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","init_game","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","cachegetInt32Memory0","getInt32Memory0","Int32Array","__wbindgen_string_new","arg0","arg1","__wbindgen_object_drop_ref","ret","dropObject","takeObject","__wbg_log_9a99fb1af846153b","console","log","__wbg_new_59cb74e423758ede","Error","__wbg_stack_558ba5917b466edd","ptr0","malloc","realloc","mem","offset","code","charCodeAt","slice","passStringToWasm0","stack","len0","__wbg_error_4bb6c2a97407129a","error","__wbindgen_throw","Object","freeze","Black","White","Man","King","Empty","Occupied","Unplayable","Allowed","UnoccupiedSrc","OccupiedDest","OutOfBounds","WrongTeamSrc","IllegalTrajectory","NoJumpablePiece","JumpingSameTeam","document","getElementById","getContext"],"mappings":"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","file":"10.bootstrap.js","sourcesContent":["import * as wasm from './draught_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n*/\nexport function init_game() {\n    wasm.init_game();\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n/**\n*/\nexport const Team = Object.freeze({ Black:0,\"0\":\"Black\",White:1,\"1\":\"White\", });\n/**\n*/\nexport const Strength = Object.freeze({ Man:0,\"0\":\"Man\",King:1,\"1\":\"King\", });\n/**\n*/\nexport const SquareState = Object.freeze({ Empty:0,\"0\":\"Empty\",Occupied:1,\"1\":\"Occupied\",Unplayable:2,\"2\":\"Unplayable\", });\n/**\n*/\nexport const Moveable = Object.freeze({ Allowed:0,\"0\":\"Allowed\",UnoccupiedSrc:1,\"1\":\"UnoccupiedSrc\",OccupiedDest:2,\"2\":\"OccupiedDest\",OutOfBounds:3,\"3\":\"OutOfBounds\",Unplayable:4,\"4\":\"Unplayable\",WrongTeamSrc:5,\"5\":\"WrongTeamSrc\",IllegalTrajectory:6,\"6\":\"IllegalTrajectory\",NoJumpablePiece:7,\"7\":\"NoJumpablePiece\",JumpingSameTeam:8,\"8\":\"JumpingSameTeam\", });\n/**\n* Single state of a checkers board\n*/\nexport class Board {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Board.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_board_free(ptr);\n    }\n    /**\n    * Get a copy of a board square by 1D array index\n    * @param {number} idx\n    * @returns {Square}\n    */\n    cell(idx) {\n        var ret = wasm.board_cell(this.ptr, idx);\n        return Square.__wrap(ret);\n    }\n    /**\n    * Get a copy of a board square by 1D array index\n    * @param {number} idx\n    * @param {Square} square\n    */\n    set_cell(idx, square) {\n        _assertClass(square, Square);\n        var ptr0 = square.ptr;\n        square.ptr = 0;\n        wasm.board_set_cell(this.ptr, idx, ptr0);\n    }\n    /**\n    * Get a copy of a board square by 2D [`BrdIdx`] index\n    * @param {BrdIdx} idx\n    * @returns {Square}\n    */\n    grid_cell(idx) {\n        _assertClass(idx, BrdIdx);\n        var ptr0 = idx.ptr;\n        idx.ptr = 0;\n        var ret = wasm.board_grid_cell(this.ptr, ptr0);\n        return Square.__wrap(ret);\n    }\n    /**\n    * Transform a 2D row/column board index into a single 1D index for use with [`Board::cells`]\n    * @param {number} row\n    * @param {number} col\n    * @returns {number}\n    */\n    cell_index(row, col) {\n        var ret = wasm.board_cell_index(this.ptr, row, col);\n        return ret >>> 0;\n    }\n    /**\n    * Similar to [`Board::cell_index`] but with a [`BrdIdx`] instead of separate indices. Transform a 2D row/column board index into a single 1D index for use with [`Board::cells`]\n    * @param {BrdIdx} idx\n    * @returns {number}\n    */\n    cell_idx(idx) {\n        _assertClass(idx, BrdIdx);\n        var ptr0 = idx.ptr;\n        idx.ptr = 0;\n        var ret = wasm.board_cell_idx(this.ptr, ptr0);\n        return ret >>> 0;\n    }\n    /**\n    * Transform a 1D array index (for [`Board::cells`]) into a 2D game board index (by row/col)\n    * @param {number} idx\n    * @returns {BrdIdx}\n    */\n    board_index(idx) {\n        var ret = wasm.board_board_index(this.ptr, idx);\n        return BrdIdx.__wrap(ret);\n    }\n    /**\n    * Check whether a move given by source and destination indices is legal\n    * @param {BrdIdx} from\n    * @param {BrdIdx} to\n    * @returns {number}\n    */\n    can_move(from, to) {\n        _assertClass(from, BrdIdx);\n        var ptr0 = from.ptr;\n        from.ptr = 0;\n        _assertClass(to, BrdIdx);\n        var ptr1 = to.ptr;\n        to.ptr = 0;\n        var ret = wasm.board_can_move(this.ptr, ptr0, ptr1);\n        return ret >>> 0;\n    }\n    /**\n    * @param {BrdIdx} from\n    * @param {BrdIdx} to\n    * @param {Piece} from_square_occupant\n    * @returns {number}\n    */\n    validate_man_move(from, to, from_square_occupant) {\n        _assertClass(from, BrdIdx);\n        var ptr0 = from.ptr;\n        from.ptr = 0;\n        _assertClass(to, BrdIdx);\n        var ptr1 = to.ptr;\n        to.ptr = 0;\n        _assertClass(from_square_occupant, Piece);\n        var ptr2 = from_square_occupant.ptr;\n        from_square_occupant.ptr = 0;\n        var ret = wasm.board_validate_man_move(this.ptr, ptr0, ptr1, ptr2);\n        return ret >>> 0;\n    }\n    /**\n    * @param {BrdIdx} from\n    * @param {BrdIdx} to\n    * @param {Piece} from_square_occupant\n    * @returns {number}\n    */\n    validate_king_move(from, to, from_square_occupant) {\n        _assertClass(from, BrdIdx);\n        var ptr0 = from.ptr;\n        from.ptr = 0;\n        _assertClass(to, BrdIdx);\n        var ptr1 = to.ptr;\n        to.ptr = 0;\n        _assertClass(from_square_occupant, Piece);\n        var ptr2 = from_square_occupant.ptr;\n        from_square_occupant.ptr = 0;\n        var ret = wasm.board_validate_king_move(this.ptr, ptr0, ptr1, ptr2);\n        return ret >>> 0;\n    }\n    /**\n    * @param {BrdIdx} from\n    * @param {BrdIdx} to\n    * @returns {number}\n    */\n    jumpee_idx(from, to) {\n        _assertClass(from, BrdIdx);\n        var ptr0 = from.ptr;\n        from.ptr = 0;\n        _assertClass(to, BrdIdx);\n        var ptr1 = to.ptr;\n        to.ptr = 0;\n        var ret = wasm.board_jumpee_idx(this.ptr, ptr0, ptr1);\n        return ret >>> 0;\n    }\n    /**\n    * Unwrap the jumpee piece from the square and [`Board::check_jumpee_team`] with [`Moveable`] response\n    * @param {Square} jumpee\n    * @param {Piece} from_occ\n    * @returns {number}\n    */\n    static validate_jumpee(jumpee, from_occ) {\n        _assertClass(jumpee, Square);\n        var ptr0 = jumpee.ptr;\n        jumpee.ptr = 0;\n        _assertClass(from_occ, Piece);\n        var ptr1 = from_occ.ptr;\n        from_occ.ptr = 0;\n        var ret = wasm.board_validate_jumpee(ptr0, ptr1);\n        return ret >>> 0;\n    }\n    /**\n    * Check that the source piece and the jumpee are of opposing teams\n    * @param {Piece} from\n    * @param {Piece} jumpee\n    * @returns {boolean}\n    */\n    static check_jumpee_team(from, jumpee) {\n        _assertClass(from, Piece);\n        var ptr0 = from.ptr;\n        from.ptr = 0;\n        _assertClass(jumpee, Piece);\n        var ptr1 = jumpee.ptr;\n        jumpee.ptr = 0;\n        var ret = wasm.board_check_jumpee_team(ptr0, ptr1);\n        return ret !== 0;\n    }\n    /**\n    * Initialise a game board without game pieces\n    * @param {number} width\n    * @param {number} height\n    * @param {number} current_turn\n    */\n    constructor(width, height, current_turn) {\n        var ret = wasm.board_new(width, height, current_turn);\n        return Board.__wrap(ret);\n    }\n    /**\n    * Reset the given board to a starting layout with 3 rows of opposing pieces\n    * @param {Board} board\n    * @param {number} piece_rows\n    * @returns {Board}\n    */\n    static init_game(board, piece_rows) {\n        _assertClass(board, Board);\n        var ptr0 = board.ptr;\n        board.ptr = 0;\n        var ret = wasm.board_init_game(ptr0, piece_rows);\n        return Board.__wrap(ret);\n    }\n    /**\n    * Get the [`Board::current_turn`] parameter\n    * @returns {number}\n    */\n    current_turn() {\n        var ret = wasm.board_current_turn(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} new_team\n    */\n    set_turn(new_team) {\n        wasm.board_set_turn(this.ptr, new_team);\n    }\n    /**\n    * Get a pointer to the backing array of board squares, [`Board::cells`]\n    * @returns {number}\n    */\n    cells() {\n        var ret = wasm.board_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the number of board squares\n    * @returns {number}\n    */\n    num_cells() {\n        var ret = wasm.board_num_cells(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Get the number of remaining pieces\n    * @returns {number}\n    */\n    num_pieces() {\n        var ret = wasm.board_num_pieces(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Get the number of remaining pieces for a player\n    * @param {number} team\n    * @returns {number}\n    */\n    num_player(team) {\n        var ret = wasm.board_num_player(this.ptr, team);\n        return ret >>> 0;\n    }\n    /**\n    * Get the score value, Black - White pieces\n    * @returns {number}\n    */\n    score() {\n        var ret = wasm.board_score(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the state of a board square by 1D array index\n    * @param {number} idx\n    * @returns {number}\n    */\n    cell_state(idx) {\n        var ret = wasm.board_cell_state(this.ptr, idx);\n        return ret >>> 0;\n    }\n}\n/**\n* Rank 2 tensor index to identify a board square by row and column\n*/\nexport class BrdIdx {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BrdIdx.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_brdidx_free(ptr);\n    }\n    /**\n    * @param {number} row\n    * @param {number} col\n    * @returns {BrdIdx}\n    */\n    static from(row, col) {\n        var ret = wasm.brdidx_from(row, col);\n        return BrdIdx.__wrap(ret);\n    }\n}\n/**\n* Root-level structure for managing the game as a collection of board states\n*/\nexport class Game {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Game.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_game_free(ptr);\n    }\n    /**\n    * Attempt to make a move given a source and destination index\n    * @param {BrdIdx} from\n    * @param {BrdIdx} to\n    */\n    make_move(from, to) {\n        _assertClass(from, BrdIdx);\n        var ptr0 = from.ptr;\n        from.ptr = 0;\n        _assertClass(to, BrdIdx);\n        var ptr1 = to.ptr;\n        to.ptr = 0;\n        wasm.game_make_move(this.ptr, ptr0, ptr1);\n    }\n    /**\n    * Update board state with given move and push new board into current state\n    * @param {BrdIdx} from\n    * @param {BrdIdx} to\n    */\n    execute_move(from, to) {\n        _assertClass(from, BrdIdx);\n        var ptr0 = from.ptr;\n        from.ptr = 0;\n        _assertClass(to, BrdIdx);\n        var ptr1 = to.ptr;\n        to.ptr = 0;\n        wasm.game_execute_move(this.ptr, ptr0, ptr1);\n    }\n    /**\n    * Update board state with given jump move and push new board into current state\n    * @param {BrdIdx} from\n    * @param {BrdIdx} to\n    */\n    execute_jump(from, to) {\n        _assertClass(from, BrdIdx);\n        var ptr0 = from.ptr;\n        from.ptr = 0;\n        _assertClass(to, BrdIdx);\n        var ptr1 = to.ptr;\n        to.ptr = 0;\n        wasm.game_execute_jump(this.ptr, ptr0, ptr1);\n    }\n    /**\n    * Push current board into the previous turns and set given board to current\n    * @param {Board} board\n    */\n    push_new_board(board) {\n        _assertClass(board, Board);\n        var ptr0 = board.ptr;\n        board.ptr = 0;\n        wasm.game_push_new_board(this.ptr, ptr0);\n    }\n    /**\n    * Set current board to given\n    * @param {Board} board\n    */\n    set_current(board) {\n        _assertClass(board, Board);\n        var ptr0 = board.ptr;\n        board.ptr = 0;\n        wasm.game_set_current(this.ptr, ptr0);\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @param {number} piece_rows\n    * @param {number} first_turn\n    */\n    constructor(width, height, piece_rows, first_turn) {\n        var ret = wasm.game_new(width, height, piece_rows, first_turn);\n        return Game.__wrap(ret);\n    }\n}\n/**\n* Game piece given by its team and strength (normal or kinged)\n*/\nexport class Piece {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Piece.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_piece_free(ptr);\n    }\n    /**\n    * @param {number} team\n    * @param {number} strength\n    */\n    constructor(team, strength) {\n        var ret = wasm.piece_new(team, strength);\n        return Piece.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Player {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_player_free(ptr);\n    }\n}\n/**\n* Board squares given by a state and a possible occupying game piece\n*/\nexport class Square {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Square.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_square_free(ptr);\n    }\n    /**\n    * @param {number} state\n    * @param {Piece | undefined} occupant\n    */\n    constructor(state, occupant) {\n        let ptr0 = 0;\n        if (!isLikeNone(occupant)) {\n            _assertClass(occupant, Piece);\n            ptr0 = occupant.ptr;\n            occupant.ptr = 0;\n        }\n        var ret = wasm.square_new(state, ptr0);\n        return Square.__wrap(ret);\n    }\n    /**\n    * @param {number} team\n    * @param {number} strength\n    * @returns {Square}\n    */\n    static pc(team, strength) {\n        var ret = wasm.square_pc(team, strength);\n        return Square.__wrap(ret);\n    }\n    /**\n    * @returns {Square}\n    */\n    static empty() {\n        var ret = wasm.square_empty();\n        return Square.__wrap(ret);\n    }\n}\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbg_log_9a99fb1af846153b(arg0) {\n    console.log(getObject(arg0));\n};\n\nexport function __wbg_new_59cb74e423758ede() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_558ba5917b466edd(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_error_4bb6c2a97407129a(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","import { init_game } from \"draught\";\nimport { memory } from \"draught/draught_bg.wasm\";\n\n// let PLAY = true;\n// let PLAY = false;\ninit_game();\n\nconst canvas = document.getElementById(\"game-canvas\");\nconst ctx = canvas.getContext('2d');\n"],"sourceRoot":""}